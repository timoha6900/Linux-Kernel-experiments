From 8d2030087a0a1dab9921ee3e95900cae91a55d63 Mon Sep 17 00:00:00 2001
From: Tymofii Ostafiev <tymofii.ostafiev@globallogic.com>
Date: Tue, 28 Apr 2020 12:46:35 +0300
Subject: [PATCH] Debugfs_control_buffer

Signed-off-by: Tymofii Ostafiev <tymofii.ostafiev@globallogic.com>
---
 drivers/misc/hello.c | 64 +++++++++++++++++++++++++++++++++++---------
 1 file changed, 52 insertions(+), 12 deletions(-)

diff --git a/drivers/misc/hello.c b/drivers/misc/hello.c
index e4491b4fec71..b701429cf66a 100644
--- a/drivers/misc/hello.c
+++ b/drivers/misc/hello.c
@@ -9,13 +9,6 @@
 #include <linux/time.h>
 #include <linux/kfifo.h>
 
-#include <linux/miscdevice.h>
-#include <linux/fs.h>
-#include <asm/uaccess.h>
-#include <linux/slab.h>
-#include <linux/jiffies.h>
-#include <linux/mutex.h>
-
 typedef struct {
 	u32 counter;
 	struct timeval time;
@@ -33,8 +26,14 @@ typedef struct {
 
 #define MYBUFFER_COUNT 4
 #define SEC_PER_MIN 60
-#define MYTIMESTAMP_SIZE_MAX 400
-#define MYSTR_SIZE_MAX 30
+#define MYTIMESTAMP_SIZE_MAX 1024
+#define MYSTR_SIZE_MAX 32
+
+const char START[] = "start";
+const char STOP[] = "stop";
+const char CLEAR[] = "clear";
+
+bool is_logging;
 
 my_device_data_t my_dev_data = { .irqn = 54 };
 
@@ -52,16 +51,56 @@ static ssize_t timestamp_read(struct file *f, char __user *buffer, size_t count,
 	return ret;
 }
 
+static ssize_t timestamp_write(struct file *f, const char __user *buffer, size_t count, loff_t *f_pos)
+{
+	char buf[32];
+	int buf_size;
+	u32 *val = f->private_data;
+	
+	buf_size = min(count, (sizeof(buf) - 1));
+	if (copy_from_user(buf, buffer, buf_size))
+		return -EFAULT;
+	
+	
+	if(strncmp(buf, START, strlen(START)) == 0)
+	{
+		pr_info("Start logging\n");
+		is_logging = true;
+	} else {
+		if(strncmp(buf, STOP, strlen(STOP)) == 0)
+		{
+			pr_info("Stop logging\n");
+			is_logging = false;
+		} else {
+			if(strncmp(buf, CLEAR, strlen(CLEAR)) == 0)
+			{
+				pr_info("Clear log\n");
+				unsigned long flags;
+				spin_lock_irqsave(&ts_string_lock, flags);
+				memset(ts_string, 0, sizeof(ts_string));
+				spin_unlock_irqrestore(&ts_string_lock, flags);
+			} else {
+				pr_info("Unknown command. Use <start>, <stop> or <clear>.\n");
+			}
+		}
+	}
+	
+	return count;
+}
+
 struct file_operations timestamp_fops = {
 	.owner = THIS_MODULE,
-	.read =	 timestamp_read,
-	.write = NULL,
+	.read = timestamp_read,
+	.write = timestamp_write,
 };
 
 
 
 static irqreturn_t intr_handler(int irqn, void *dev)
 {
+	if(!is_logging)
+		return IRQ_HANDLED;
+	
 	unsigned long flags;
 	my_device_data_t *mydev = dev;
 	my_timestamp_t new_timestamp = {};
@@ -142,6 +181,7 @@ static int __init hello_init(void)
 	int rc;
 	pr_info("Hello, world!\n");
 
+	is_logging = true;
 	my_dev_data.counter = 0;
 	
 	spin_lock_init(&my_dev_data.lock);
@@ -166,7 +206,7 @@ static int __init hello_init(void)
 		return -EIO;
 	}
 	
-	my_dev_data.date_debugfs = debugfs_create_file("date", 0444, my_dev_data.dir_debugfs, NULL, &timestamp_fops);
+	my_dev_data.date_debugfs = debugfs_create_file("date", 0666, my_dev_data.dir_debugfs, NULL, &timestamp_fops);
 	if(!my_dev_data.date_debugfs)
 	{
 		pr_err("hello_device: failed to create debugfs/hellomodule/date\n");
-- 
2.17.1

