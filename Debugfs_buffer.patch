From 53c311c3a24add0aa8c823d022ab9b7c9ec4c3fb Mon Sep 17 00:00:00 2001
From: Tymofii Ostafiev <tymofii.ostafiev@globallogic.com>
Date: Tue, 28 Apr 2020 09:56:09 +0300
Subject: [PATCH] Debugfs_buffer

Signed-off-by: Tymofii Ostafiev <tymofii.ostafiev@globallogic.com>
---
 drivers/misc/hello.c | 164 +++++++++++++++++++++++++++++++++++++------
 1 file changed, 141 insertions(+), 23 deletions(-)

diff --git a/drivers/misc/hello.c b/drivers/misc/hello.c
index bf050f7af001..e4491b4fec71 100644
--- a/drivers/misc/hello.c
+++ b/drivers/misc/hello.c
@@ -6,63 +6,181 @@
 #include <linux/device.h>
 #include <linux/debugfs.h>
 #include <linux/spinlock.h>
+#include <linux/time.h>
+#include <linux/kfifo.h>
 
+#include <linux/miscdevice.h>
+#include <linux/fs.h>
+#include <asm/uaccess.h>
+#include <linux/slab.h>
+#include <linux/jiffies.h>
+#include <linux/mutex.h>
+
+typedef struct {
+	u32 counter;
+	struct timeval time;
+} my_timestamp_t;
 
 typedef struct {
 	unsigned int irqn;
 	u32 counter;
 	spinlock_t lock;
-	struct dentry *dir;
-	struct dentry *file;
-} dev_data;
+	struct dentry *dir_debugfs;
+	struct dentry *counter_debugfs;
+	struct dentry *date_debugfs;
+	DECLARE_KFIFO_PTR(fifo, my_timestamp_t);
+} my_device_data_t;
+
+#define MYBUFFER_COUNT 4
+#define SEC_PER_MIN 60
+#define MYTIMESTAMP_SIZE_MAX 400
+#define MYSTR_SIZE_MAX 30
+
+my_device_data_t my_dev_data = { .irqn = 54 };
+
+static char ts_string[MYTIMESTAMP_SIZE_MAX] = { 0 };
+static DEFINE_SPINLOCK(ts_string_lock);
+
+static ssize_t timestamp_read(struct file *f, char __user *buffer, size_t count, loff_t *f_pos)
+{
+	int ret;
+	unsigned long flags;
+	spin_lock_irqsave(&ts_string_lock, flags);
+	ret = simple_read_from_buffer(buffer, count, f_pos, ts_string, sizeof(ts_string));
+	spin_unlock_irqrestore(&ts_string_lock, flags);
+	
+	return ret;
+}
+
+struct file_operations timestamp_fops = {
+	.owner = THIS_MODULE,
+	.read =	 timestamp_read,
+	.write = NULL,
+};
+
 
-dev_data hello_dev = { .irqn = 54 };
 
 static irqreturn_t intr_handler(int irqn, void *dev)
 {
 	unsigned long flags;
-	dev_data *hellodev = dev;
+	my_device_data_t *mydev = dev;
+	my_timestamp_t new_timestamp = {};
+	
+	spin_lock_irqsave(&mydev->lock, flags);
+	
+	do_gettimeofday(&new_timestamp.time);
 	
-	spin_lock_irqsave(&hellodev->lock, flags);
-	++hellodev->counter;
-	spin_unlock_irqrestore(&hellodev->lock, flags);
+	++mydev->counter;
+	new_timestamp.counter = mydev->counter;
+	spin_unlock_irqrestore(&mydev->lock, flags);
 
-	return IRQ_HANDLED;
+	return kfifo_in_spinlocked(&mydev->fifo,
+											&new_timestamp,
+											1,
+											&mydev->lock)
+		? IRQ_WAKE_THREAD
+		: IRQ_NONE;
 }
 
 static irqreturn_t intr_job(int irqn, void *dev)
 {
-	//pr_info("%s: this is gandler irq %d %d\n", __func__, irqn, current->pid);
+	my_device_data_t *mydev = dev;
+	my_timestamp_t ts;
+	struct tm time;
+	unsigned long flags;
+	
+	while(!kfifo_is_empty(&mydev->fifo))
+	{
+		if(!kfifo_out_spinlocked(&mydev->fifo, &ts, 1, &mydev->lock))
+		{
+			break;
+		}
+		
+		/* extract current date from the timeval */
+		time64_to_tm(ts.time.tv_sec, sys_tz.tz_minuteswest * SEC_PER_MIN, &time);
+		
+		/* ts string write */
+		spin_lock_irqsave(&ts_string_lock, flags);
+		
+		char str[MYSTR_SIZE_MAX] = { 0 };
+		snprintf(str, sizeof(str),
+					"irq %u %d:%d:%d \n",
+					ts.counter,
+					time.tm_hour,
+					time.tm_min,
+					time.tm_sec);
+					
+		if((strlen(ts_string) + strlen(str)) >= (MYTIMESTAMP_SIZE_MAX - MYSTR_SIZE_MAX))
+		{
+			char tmp_str[MYTIMESTAMP_SIZE_MAX] = { 0 };
+			int n = 0;
+			do{
+				n++;
+			}while(ts_string[n] != '\n');
+			strcpy(tmp_str, ts_string+n);
+			n = strlen(tmp_str);
+			strcpy(tmp_str+n, str);
+			snprintf(ts_string, sizeof(ts_string), "%s", tmp_str);
+		} else {
+			strcpy(ts_string+strlen(ts_string), str);
+		}
+		
+		spin_unlock_irqrestore(&ts_string_lock, flags);
+	}
+		
 	return IRQ_HANDLED;
 }
 
+static inline void cleanup(void)
+{
+	debugfs_remove_recursive(my_dev_data.dir_debugfs);
+	kfifo_free(&my_dev_data.fifo);
+}
+
 static int __init hello_init(void)
 {
 	int rc;
 	pr_info("Hello, world!\n");
 
-	hello_dev.counter = 0;
+	my_dev_data.counter = 0;
+	
+	spin_lock_init(&my_dev_data.lock);
 	
-	spin_lock_init(&hello_dev.lock);
+	/* Allocate FIFO buffer */
+	rc = kfifo_alloc(&my_dev_data.fifo, MYBUFFER_COUNT, GFP_ATOMIC);
+	if(rc)
+	{
+		pr_err("hello device: failed to allocate memory for fifo\n");
+		return rc;
+	}
 
-	hello_dev.dir = debugfs_create_dir("hellomodule", 0);
-	if(!hello_dev.dir){
+	my_dev_data.dir_debugfs = debugfs_create_dir("hellomodule", 0);
+	if(!my_dev_data.dir_debugfs){
 		pr_err("hello_device: failed to create dir debugfs/hellomodule\n");
 		return -EIO;
 	}
 
-	hello_dev.file = debugfs_create_u32("counter", 0666, hello_dev.dir, &hello_dev.counter);
-	if(!hello_dev.file){
+	my_dev_data.counter_debugfs = debugfs_create_u32("counter", 0666, my_dev_data.dir_debugfs, &my_dev_data.counter);
+	if(!my_dev_data.counter_debugfs){
 		pr_err("hello_device: failed to create debugfs/hellomodule/counter\n");
 		return -EIO;
 	}
-
-	rc = request_threaded_irq(hello_dev.irqn, intr_handler, intr_job,
-				IRQF_SHARED, "hello_device", &hello_dev);
+	
+	my_dev_data.date_debugfs = debugfs_create_file("date", 0444, my_dev_data.dir_debugfs, NULL, &timestamp_fops);
+	if(!my_dev_data.date_debugfs)
+	{
+		pr_err("hello_device: failed to create debugfs/hellomodule/date\n");
+		cleanup();
+		return -EIO;
+	}
+	
+	rc = request_threaded_irq(my_dev_data.irqn, intr_handler, intr_job,
+				IRQF_SHARED, "hello_device", &my_dev_data);
 
 	if(rc){
-		pr_err("hello_device: cannot register IRQ %d\n", hello_dev.irqn);
-		return -EIO;
+		pr_err("hello_device: cannot register IRQ %d\n", my_dev_data.irqn);
+		cleanup;
+		return rc;
 	}
 
 	return 0;
@@ -70,8 +188,8 @@ static int __init hello_init(void)
 
 static void __exit hello_exit(void)
 {
-	free_irq(hello_dev.irqn, &hello_dev);
-	debugfs_remove_recursive(hello_dev.dir);
+	free_irq(my_dev_data.irqn, &my_dev_data);
+	cleanup();
 	pr_info("Goodbye, world!\n");
 }
 
-- 
2.17.1

