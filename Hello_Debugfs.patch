From 5c9d07319c44455d31fce17e24c8e860d824610b Mon Sep 17 00:00:00 2001
From: Tymofii Ostafiev <tymofii.ostafiev@globallogic.com>
Date: Mon, 27 Apr 2020 13:35:46 +0300
Subject: [PATCH] Hello_Debugfs

Signed-off-by: Tymofii Ostafiev <tymofii.ostafiev@globallogic.com>
---
 drivers/misc/hello.c            | 42 ++++++++++++++++++++++++++++-----
 drivers/tty/serial/amba-pl011.c |  2 +-
 2 files changed, 37 insertions(+), 7 deletions(-)

diff --git a/drivers/misc/hello.c b/drivers/misc/hello.c
index 0b7086fb2f9d..bf050f7af001 100644
--- a/drivers/misc/hello.c
+++ b/drivers/misc/hello.c
@@ -4,30 +4,59 @@
 #include <linux/serial_core.h>
 #include <linux/irqreturn.h>
 #include <linux/device.h>
+#include <linux/debugfs.h>
+#include <linux/spinlock.h>
+
 
 typedef struct {
 	unsigned int irqn;
-} device_id;
+	u32 counter;
+	spinlock_t lock;
+	struct dentry *dir;
+	struct dentry *file;
+} dev_data;
+
+dev_data hello_dev = { .irqn = 54 };
 
 static irqreturn_t intr_handler(int irqn, void *dev)
 {
-	pr_info("Hello, %d!", irqn);
-	return IRQ_WAKE_THREAD;
+	unsigned long flags;
+	dev_data *hellodev = dev;
+	
+	spin_lock_irqsave(&hellodev->lock, flags);
+	++hellodev->counter;
+	spin_unlock_irqrestore(&hellodev->lock, flags);
+
+	return IRQ_HANDLED;
 }
 
 static irqreturn_t intr_job(int irqn, void *dev)
 {
-	pr_info("%s: this is gandler irq %d %d\n", __func__, irqn, current->pid);
+	//pr_info("%s: this is gandler irq %d %d\n", __func__, irqn, current->pid);
 	return IRQ_HANDLED;
 }
 
-device_id hello_dev = { .irqn = 54 };
-
 static int __init hello_init(void)
 {
 	int rc;
 	pr_info("Hello, world!\n");
 
+	hello_dev.counter = 0;
+	
+	spin_lock_init(&hello_dev.lock);
+
+	hello_dev.dir = debugfs_create_dir("hellomodule", 0);
+	if(!hello_dev.dir){
+		pr_err("hello_device: failed to create dir debugfs/hellomodule\n");
+		return -EIO;
+	}
+
+	hello_dev.file = debugfs_create_u32("counter", 0666, hello_dev.dir, &hello_dev.counter);
+	if(!hello_dev.file){
+		pr_err("hello_device: failed to create debugfs/hellomodule/counter\n");
+		return -EIO;
+	}
+
 	rc = request_threaded_irq(hello_dev.irqn, intr_handler, intr_job,
 				IRQF_SHARED, "hello_device", &hello_dev);
 
@@ -42,6 +71,7 @@ static int __init hello_init(void)
 static void __exit hello_exit(void)
 {
 	free_irq(hello_dev.irqn, &hello_dev);
+	debugfs_remove_recursive(hello_dev.dir);
 	pr_info("Goodbye, world!\n");
 }
 
diff --git a/drivers/tty/serial/amba-pl011.c b/drivers/tty/serial/amba-pl011.c
index 65748ae73cc7..41ed888aafc6 100644
--- a/drivers/tty/serial/amba-pl011.c
+++ b/drivers/tty/serial/amba-pl011.c
@@ -1482,7 +1482,7 @@ static irqreturn_t pl011_int(int irq, void *dev_id)
 	unsigned int status, pass_counter = AMBA_ISR_PASS_LIMIT;
 	int handled = 0;
 
-	pr_info("%s: this is gandler irq %d %d\n", __func__, irq, current->pid);
+	//pr_info("%s: this is gandler irq %d %d\n", __func__, irq, current->pid);
 
 	spin_lock_irqsave(&uap->port.lock, flags);
 	status = pl011_read(uap, REG_RIS) & uap->im;
-- 
2.17.1

